// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DEV_DATABASE_URL")
}

model User {
    id               Int            @id @default(autoincrement())
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    username         String         @unique @db.VarChar(15)
    email            String         @unique @db.VarChar(254)
    password         String
    dateOfBirth      DateTime       @db.Date()
    role             UserRole       @default(USER)
    profile          Profile?
    posts            Post[]
    likedPosts       PostLike[]
    repostedPosts    PostRepost[]
    bookmarkedPosts  PostBookmark[]
    followers        Follow[]       @relation("followee")
    following        Follow[]       @relation("follower")
    messagesReceived Message[]      @relation("receiver")
    messagesSent     Message[]      @relation("messeger")
    blockedBy        Block[]        @relation("blocked")
    blockedUsers     Block[]        @relation("blocker")
}

enum UserRole {
    USER
    ADMIN
}

model Profile {
    id             Int      @id @default(autoincrement())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    name           String   @db.VarChar(50)
    bio            String   @db.VarChar(60)
    location       String   @db.VarChar(30)
    websiteUrl     String   @db.VarChar(100)
    profilePicture String   @db.VarChar(255)
    bannerPicture  String   @db.VarChar(255)
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         Int      @unique
}

model Post {
    id        Int            @id @default(autoincrement())
    content   String         @db.VarChar(280)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  Int
    replyTo   Post?          @relation("reply", fields: [replyToId], references: [id], onDelete: Cascade)
    replyToId Int?
    replies   Post[]         @relation("reply")
    likes     PostLike[]
    reposts   PostRepost[]
    bookmarks PostBookmark[]
}

model PostLike {
    postId    Int
    userId    Int
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id(name: "postLikeId", [postId, userId])
}

model PostRepost {
    postId    Int
    userId    Int
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id(name: "postRepostId", [postId, userId])
}

model PostBookmark {
    userId    Int
    postId    Int
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id(name: "postBookmarkId", [userId, postId])
}

model Follow {
    followerId Int
    followeeId Int
    createdAt  DateTime @default(now())
    follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followee   User     @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade)

    @@id(name: "followId", [followerId, followeeId])
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String   @db.VarChar(10000)
    createdAt  DateTime @default(now())
    author     User     @relation("messeger", fields: [authorId], references: [id], onDelete: Cascade)
    authorId   Int
    receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId Int
}

model Block {
    blockerId Int
    blockedId Int
    createdAt DateTime @default(now())
    blocker   User     @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
    blocked   User     @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)

    @@id(name: "blockId", [blockerId, blockedId])
}
